# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _decomp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_decomp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_decomp')
    _decomp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_decomp', [dirname(__file__)])
        except ImportError:
            import _decomp
            return _decomp
        try:
            _mod = imp.load_module('_decomp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _decomp = swig_import_helper()
    del swig_import_helper
else:
    import _decomp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _decomp.delete_SwigPyIterator

    def value(self, *args, **kwargs):
        """value(SwigPyIterator self) -> PyObject *"""
        return _decomp.SwigPyIterator_value(self, *args, **kwargs)


    def incr(self, *args, **kwargs):
        """incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _decomp.SwigPyIterator_incr(self, *args, **kwargs)


    def decr(self, *args, **kwargs):
        """decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _decomp.SwigPyIterator_decr(self, *args, **kwargs)


    def distance(self, *args, **kwargs):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _decomp.SwigPyIterator_distance(self, *args, **kwargs)


    def equal(self, *args, **kwargs):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _decomp.SwigPyIterator_equal(self, *args, **kwargs)


    def copy(self, *args, **kwargs):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _decomp.SwigPyIterator_copy(self, *args, **kwargs)


    def next(self, *args, **kwargs):
        """next(SwigPyIterator self) -> PyObject *"""
        return _decomp.SwigPyIterator_next(self, *args, **kwargs)


    def __next__(self, *args, **kwargs):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _decomp.SwigPyIterator___next__(self, *args, **kwargs)


    def previous(self, *args, **kwargs):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _decomp.SwigPyIterator_previous(self, *args, **kwargs)


    def advance(self, *args, **kwargs):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _decomp.SwigPyIterator_advance(self, *args, **kwargs)


    def __eq__(self, *args, **kwargs):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _decomp.SwigPyIterator___eq__(self, *args, **kwargs)


    def __ne__(self, *args, **kwargs):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _decomp.SwigPyIterator___ne__(self, *args, **kwargs)


    def __iadd__(self, *args, **kwargs):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _decomp.SwigPyIterator___iadd__(self, *args, **kwargs)


    def __isub__(self, *args, **kwargs):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _decomp.SwigPyIterator___isub__(self, *args, **kwargs)


    def __add__(self, *args, **kwargs):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _decomp.SwigPyIterator___add__(self, *args, **kwargs)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _decomp.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_decomp.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_decomp.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_decomp.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_decomp.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_decomp.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_decomp.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_decomp.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_decomp.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_decomp.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_decomp.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_decomp.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_decomp.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_decomp.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_decomp.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_decomp.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_decomp.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _decomp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SOMcomponent(object):
    """Proxy of C++ SOMcomponent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    count = _swig_property(_decomp.SOMcomponent_count_get, _decomp.SOMcomponent_count_set)
    Id = _swig_property(_decomp.SOMcomponent_Id_get)
    Name = _swig_property(_decomp.SOMcomponent_Name_get, _decomp.SOMcomponent_Name_set)
    is_stored = _swig_property(_decomp.SOMcomponent_is_stored_get, _decomp.SOMcomponent_is_stored_set)
    k_pot = _swig_property(_decomp.SOMcomponent_k_pot_get, _decomp.SOMcomponent_k_pot_set)
    E_a = _swig_property(_decomp.SOMcomponent_E_a_get, _decomp.SOMcomponent_E_a_set)
    K_w = _swig_property(_decomp.SOMcomponent_K_w_get, _decomp.SOMcomponent_K_w_set)
    n_w = _swig_property(_decomp.SOMcomponent_n_w_get, _decomp.SOMcomponent_n_w_set)
    K_pH = _swig_property(_decomp.SOMcomponent_K_pH_get, _decomp.SOMcomponent_K_pH_set)
    m_pH = _swig_property(_decomp.SOMcomponent_m_pH_get, _decomp.SOMcomponent_m_pH_set)

    def set_product(self, *args, **kwargs):
        """set_product(SOMcomponent self, SOMcomponent product, double fraction)"""
        return _decomp.SOMcomponent_set_product(self, *args, **kwargs)


    def get_product_fraction(self, *args, **kwargs):
        """get_product_fraction(SOMcomponent self, SOMcomponent product) -> double"""
        return _decomp.SOMcomponent_get_product_fraction(self, *args, **kwargs)


    def get_products(self, *args, **kwargs):
        """get_products(SOMcomponent self) -> component_set"""
        return _decomp.SOMcomponent_get_products(self, *args, **kwargs)


    def decomp(self, *args, **kwargs):
        """decomp(SOMcomponent self, double T, double wetness, double pH) -> double"""
        return _decomp.SOMcomponent_decomp(self, *args, **kwargs)


    def __lt__(self, *args, **kwargs):
        """__lt__(SOMcomponent self, SOMcomponent cmp) -> bool"""
        return _decomp.SOMcomponent___lt__(self, *args, **kwargs)


    def __eq__(self, *args, **kwargs):
        """__eq__(SOMcomponent self, SOMcomponent cmp) -> bool"""
        return _decomp.SOMcomponent___eq__(self, *args, **kwargs)


    def __ne__(self, *args, **kwargs):
        """__ne__(SOMcomponent self, SOMcomponent cmp) -> bool"""
        return _decomp.SOMcomponent___ne__(self, *args, **kwargs)


    def __init__(self, *args):
        """
        __init__(SOMcomponent self, std::string name, bool is_stored, double k_pot, double E_a, double K_w, double n_w, double K_pH, double m_pH=1.0) -> SOMcomponent
        __init__(SOMcomponent self) -> SOMcomponent
        __init__(SOMcomponent self, SOMcomponent copy) -> SOMcomponent
        """
        _decomp.SOMcomponent_swiginit(self, _decomp.new_SOMcomponent(*args))
    __swig_destroy__ = _decomp.delete_SOMcomponent

    def __repr__(self, *args, **kwargs):
        """__repr__(SOMcomponent self) -> std::string"""
        return _decomp.SOMcomponent___repr__(self, *args, **kwargs)

SOMcomponent.set_product = new_instancemethod(_decomp.SOMcomponent_set_product, None, SOMcomponent)
SOMcomponent.get_product_fraction = new_instancemethod(_decomp.SOMcomponent_get_product_fraction, None, SOMcomponent)
SOMcomponent.get_products = new_instancemethod(_decomp.SOMcomponent_get_products, None, SOMcomponent)
SOMcomponent.decomp = new_instancemethod(_decomp.SOMcomponent_decomp, None, SOMcomponent)
SOMcomponent.__lt__ = new_instancemethod(_decomp.SOMcomponent___lt__, None, SOMcomponent)
SOMcomponent.__eq__ = new_instancemethod(_decomp.SOMcomponent___eq__, None, SOMcomponent)
SOMcomponent.__ne__ = new_instancemethod(_decomp.SOMcomponent___ne__, None, SOMcomponent)
SOMcomponent.__repr__ = new_instancemethod(_decomp.SOMcomponent___repr__, None, SOMcomponent)
SOMcomponent_swigregister = _decomp.SOMcomponent_swigregister
SOMcomponent_swigregister(SOMcomponent)
cvar = _decomp.cvar

class component_set(object):
    """Proxy of C++ std::vector<(SOMcomponent)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self, *args, **kwargs):
        """iterator(component_set self) -> SwigPyIterator"""
        return _decomp.component_set_iterator(self, *args, **kwargs)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args, **kwargs):
        """__nonzero__(component_set self) -> bool"""
        return _decomp.component_set___nonzero__(self, *args, **kwargs)


    def __bool__(self, *args, **kwargs):
        """__bool__(component_set self) -> bool"""
        return _decomp.component_set___bool__(self, *args, **kwargs)


    def __len__(self, *args, **kwargs):
        """__len__(component_set self) -> std::vector< SOMcomponent >::size_type"""
        return _decomp.component_set___len__(self, *args, **kwargs)


    def __getslice__(self, *args, **kwargs):
        """__getslice__(component_set self, std::vector< SOMcomponent >::difference_type i, std::vector< SOMcomponent >::difference_type j) -> component_set"""
        return _decomp.component_set___getslice__(self, *args, **kwargs)


    def __setslice__(self, *args):
        """
        __setslice__(component_set self, std::vector< SOMcomponent >::difference_type i, std::vector< SOMcomponent >::difference_type j)
        __setslice__(component_set self, std::vector< SOMcomponent >::difference_type i, std::vector< SOMcomponent >::difference_type j, component_set v)
        """
        return _decomp.component_set___setslice__(self, *args)


    def __delslice__(self, *args, **kwargs):
        """__delslice__(component_set self, std::vector< SOMcomponent >::difference_type i, std::vector< SOMcomponent >::difference_type j)"""
        return _decomp.component_set___delslice__(self, *args, **kwargs)


    def __delitem__(self, *args):
        """
        __delitem__(component_set self, std::vector< SOMcomponent >::difference_type i)
        __delitem__(component_set self, PySliceObject * slice)
        """
        return _decomp.component_set___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(component_set self, PySliceObject * slice) -> component_set
        __getitem__(component_set self, std::vector< SOMcomponent >::difference_type i) -> SOMcomponent
        """
        return _decomp.component_set___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(component_set self, PySliceObject * slice, component_set v)
        __setitem__(component_set self, PySliceObject * slice)
        __setitem__(component_set self, std::vector< SOMcomponent >::difference_type i, SOMcomponent x)
        """
        return _decomp.component_set___setitem__(self, *args)


    def pop(self, *args, **kwargs):
        """pop(component_set self) -> SOMcomponent"""
        return _decomp.component_set_pop(self, *args, **kwargs)


    def append(self, *args, **kwargs):
        """append(component_set self, SOMcomponent x)"""
        return _decomp.component_set_append(self, *args, **kwargs)


    def empty(self, *args, **kwargs):
        """empty(component_set self) -> bool"""
        return _decomp.component_set_empty(self, *args, **kwargs)


    def size(self, *args, **kwargs):
        """size(component_set self) -> std::vector< SOMcomponent >::size_type"""
        return _decomp.component_set_size(self, *args, **kwargs)


    def swap(self, *args, **kwargs):
        """swap(component_set self, component_set v)"""
        return _decomp.component_set_swap(self, *args, **kwargs)


    def begin(self, *args, **kwargs):
        """begin(component_set self) -> std::vector< SOMcomponent >::iterator"""
        return _decomp.component_set_begin(self, *args, **kwargs)


    def end(self, *args, **kwargs):
        """end(component_set self) -> std::vector< SOMcomponent >::iterator"""
        return _decomp.component_set_end(self, *args, **kwargs)


    def rbegin(self, *args, **kwargs):
        """rbegin(component_set self) -> std::vector< SOMcomponent >::reverse_iterator"""
        return _decomp.component_set_rbegin(self, *args, **kwargs)


    def rend(self, *args, **kwargs):
        """rend(component_set self) -> std::vector< SOMcomponent >::reverse_iterator"""
        return _decomp.component_set_rend(self, *args, **kwargs)


    def clear(self, *args, **kwargs):
        """clear(component_set self)"""
        return _decomp.component_set_clear(self, *args, **kwargs)


    def get_allocator(self, *args, **kwargs):
        """get_allocator(component_set self) -> std::vector< SOMcomponent >::allocator_type"""
        return _decomp.component_set_get_allocator(self, *args, **kwargs)


    def pop_back(self, *args, **kwargs):
        """pop_back(component_set self)"""
        return _decomp.component_set_pop_back(self, *args, **kwargs)


    def erase(self, *args):
        """
        erase(component_set self, std::vector< SOMcomponent >::iterator pos) -> std::vector< SOMcomponent >::iterator
        erase(component_set self, std::vector< SOMcomponent >::iterator first, std::vector< SOMcomponent >::iterator last) -> std::vector< SOMcomponent >::iterator
        """
        return _decomp.component_set_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(SOMcomponent)> self) -> component_set
        __init__(std::vector<(SOMcomponent)> self, component_set arg2) -> component_set
        __init__(std::vector<(SOMcomponent)> self, std::vector< SOMcomponent >::size_type size) -> component_set
        __init__(std::vector<(SOMcomponent)> self, std::vector< SOMcomponent >::size_type size, SOMcomponent value) -> component_set
        """
        _decomp.component_set_swiginit(self, _decomp.new_component_set(*args))

    def push_back(self, *args, **kwargs):
        """push_back(component_set self, SOMcomponent x)"""
        return _decomp.component_set_push_back(self, *args, **kwargs)


    def front(self, *args, **kwargs):
        """front(component_set self) -> SOMcomponent"""
        return _decomp.component_set_front(self, *args, **kwargs)


    def back(self, *args, **kwargs):
        """back(component_set self) -> SOMcomponent"""
        return _decomp.component_set_back(self, *args, **kwargs)


    def assign(self, *args, **kwargs):
        """assign(component_set self, std::vector< SOMcomponent >::size_type n, SOMcomponent x)"""
        return _decomp.component_set_assign(self, *args, **kwargs)


    def resize(self, *args):
        """
        resize(component_set self, std::vector< SOMcomponent >::size_type new_size)
        resize(component_set self, std::vector< SOMcomponent >::size_type new_size, SOMcomponent x)
        """
        return _decomp.component_set_resize(self, *args)


    def insert(self, *args):
        """
        insert(component_set self, std::vector< SOMcomponent >::iterator pos, SOMcomponent x) -> std::vector< SOMcomponent >::iterator
        insert(component_set self, std::vector< SOMcomponent >::iterator pos, std::vector< SOMcomponent >::size_type n, SOMcomponent x)
        """
        return _decomp.component_set_insert(self, *args)


    def reserve(self, *args, **kwargs):
        """reserve(component_set self, std::vector< SOMcomponent >::size_type n)"""
        return _decomp.component_set_reserve(self, *args, **kwargs)


    def capacity(self, *args, **kwargs):
        """capacity(component_set self) -> std::vector< SOMcomponent >::size_type"""
        return _decomp.component_set_capacity(self, *args, **kwargs)

    __swig_destroy__ = _decomp.delete_component_set
component_set.iterator = new_instancemethod(_decomp.component_set_iterator, None, component_set)
component_set.__nonzero__ = new_instancemethod(_decomp.component_set___nonzero__, None, component_set)
component_set.__bool__ = new_instancemethod(_decomp.component_set___bool__, None, component_set)
component_set.__len__ = new_instancemethod(_decomp.component_set___len__, None, component_set)
component_set.__getslice__ = new_instancemethod(_decomp.component_set___getslice__, None, component_set)
component_set.__setslice__ = new_instancemethod(_decomp.component_set___setslice__, None, component_set)
component_set.__delslice__ = new_instancemethod(_decomp.component_set___delslice__, None, component_set)
component_set.__delitem__ = new_instancemethod(_decomp.component_set___delitem__, None, component_set)
component_set.__getitem__ = new_instancemethod(_decomp.component_set___getitem__, None, component_set)
component_set.__setitem__ = new_instancemethod(_decomp.component_set___setitem__, None, component_set)
component_set.pop = new_instancemethod(_decomp.component_set_pop, None, component_set)
component_set.append = new_instancemethod(_decomp.component_set_append, None, component_set)
component_set.empty = new_instancemethod(_decomp.component_set_empty, None, component_set)
component_set.size = new_instancemethod(_decomp.component_set_size, None, component_set)
component_set.swap = new_instancemethod(_decomp.component_set_swap, None, component_set)
component_set.begin = new_instancemethod(_decomp.component_set_begin, None, component_set)
component_set.end = new_instancemethod(_decomp.component_set_end, None, component_set)
component_set.rbegin = new_instancemethod(_decomp.component_set_rbegin, None, component_set)
component_set.rend = new_instancemethod(_decomp.component_set_rend, None, component_set)
component_set.clear = new_instancemethod(_decomp.component_set_clear, None, component_set)
component_set.get_allocator = new_instancemethod(_decomp.component_set_get_allocator, None, component_set)
component_set.pop_back = new_instancemethod(_decomp.component_set_pop_back, None, component_set)
component_set.erase = new_instancemethod(_decomp.component_set_erase, None, component_set)
component_set.push_back = new_instancemethod(_decomp.component_set_push_back, None, component_set)
component_set.front = new_instancemethod(_decomp.component_set_front, None, component_set)
component_set.back = new_instancemethod(_decomp.component_set_back, None, component_set)
component_set.assign = new_instancemethod(_decomp.component_set_assign, None, component_set)
component_set.resize = new_instancemethod(_decomp.component_set_resize, None, component_set)
component_set.insert = new_instancemethod(_decomp.component_set_insert, None, component_set)
component_set.reserve = new_instancemethod(_decomp.component_set_reserve, None, component_set)
component_set.capacity = new_instancemethod(_decomp.component_set_capacity, None, component_set)
component_set_swigregister = _decomp.component_set_swigregister
component_set_swigregister(component_set)

class SOM(object):
    """Proxy of C++ SOM class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def get_pool_types(*args, **kwargs):
        """get_pool_types() -> component_set"""
        return _decomp.SOM_get_pool_types(*args, **kwargs)

    get_pool_types = staticmethod(get_pool_types)

    def add_component(*args, **kwargs):
        """add_component(std::string name, bool is_stored, double k_pot, double E_a, double K_w, double n_w, double K_pH, double m_pH) -> SOMcomponent"""
        return _decomp.SOM_add_component(*args, **kwargs)

    add_component = staticmethod(add_component)
    N = _swig_property(_decomp.SOM_N_get, _decomp.SOM_N_set)
    CNmin = _swig_property(_decomp.SOM_CNmin_get, _decomp.SOM_CNmin_set)
    CNmax = _swig_property(_decomp.SOM_CNmax_get, _decomp.SOM_CNmax_set)

    def get_C_pool(self, *args, **kwargs):
        """get_C_pool(SOM self, int index) -> double"""
        return _decomp.SOM_get_C_pool(self, *args, **kwargs)


    def set_C_pool(self, *args, **kwargs):
        """set_C_pool(SOM self, int index, double pool_size)"""
        return _decomp.SOM_set_C_pool(self, *args, **kwargs)


    def __imul__(self, *args, **kwargs):
        """__imul__(SOM self, double right) -> SOM"""
        return _decomp.SOM___imul__(self, *args, **kwargs)


    def __mul__(self, *args, **kwargs):
        """__mul__(SOM self, double right) -> SOM"""
        return _decomp.SOM___mul__(self, *args, **kwargs)


    def __iadd__(self, *args, **kwargs):
        """__iadd__(SOM self, SOM right) -> SOM"""
        return _decomp.SOM___iadd__(self, *args, **kwargs)


    def __isub__(self, *args, **kwargs):
        """__isub__(SOM self, SOM right) -> SOM"""
        return _decomp.SOM___isub__(self, *args, **kwargs)


    def __add__(self, *args, **kwargs):
        """__add__(SOM self, SOM right) -> SOM"""
        return _decomp.SOM___add__(self, *args, **kwargs)


    def __sub__(self, *args, **kwargs):
        """__sub__(SOM self, SOM right) -> SOM"""
        return _decomp.SOM___sub__(self, *args, **kwargs)


    def __itruediv__(self, *args):
        return _decomp.SOM___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _decomp.SOM___truediv__(self, *args)
    __div__ = __truediv__



    def dCdt(self, *args, **kwargs):
        """dCdt(SOM self, double T, double wetness, double pH, double Nsol=0) -> SOM"""
        return _decomp.SOM_dCdt(self, *args, **kwargs)


    def __init__(self, *args):
        """
        __init__(SOM self, SOM copy) -> SOM
        __init__(SOM self, double N=0.0, double EDC=0.0, double CELL=0.0, double LIGN=0.0, double RC=0.0, double DOC=0.0) -> SOM
        """
        _decomp.SOM_swiginit(self, _decomp.new_SOM(*args))

    def integrate(self, *args, **kwargs):
        """integrate(SOM self, double dt, double T, double wetness, double pH) -> SOM"""
        return _decomp.SOM_integrate(self, *args, **kwargs)


    def to_string(self, *args, **kwargs):
        """to_string(SOM self) -> std::string"""
        return _decomp.SOM_to_string(self, *args, **kwargs)

    C = _swig_property(_decomp.SOM_C_get)
    CN = _swig_property(_decomp.SOM_CN_get)

    def __getitem__(self, *args, **kwargs):
        """__getitem__(SOM self, SOMcomponent comp) -> double"""
        return _decomp.SOM___getitem__(self, *args, **kwargs)


    def __setitem__(self, *args, **kwargs):
        """__setitem__(SOM self, SOMcomponent comp, double pool_size)"""
        return _decomp.SOM___setitem__(self, *args, **kwargs)


    def __rmul__(self, *args, **kwargs):
        """__rmul__(SOM self, double right) -> SOM"""
        return _decomp.SOM___rmul__(self, *args, **kwargs)


    def __repr__(self, *args, **kwargs):
        """__repr__(SOM self) -> std::string"""
        return _decomp.SOM___repr__(self, *args, **kwargs)


    def __iter__(self):
        pools=SOM.get_pool_types()
        for pool in pools:
            yield pool, self[pool]

    __swig_destroy__ = _decomp.delete_SOM
SOM.get_C_pool = new_instancemethod(_decomp.SOM_get_C_pool, None, SOM)
SOM.set_C_pool = new_instancemethod(_decomp.SOM_set_C_pool, None, SOM)
SOM.__imul__ = new_instancemethod(_decomp.SOM___imul__, None, SOM)
SOM.__mul__ = new_instancemethod(_decomp.SOM___mul__, None, SOM)
SOM.__iadd__ = new_instancemethod(_decomp.SOM___iadd__, None, SOM)
SOM.__isub__ = new_instancemethod(_decomp.SOM___isub__, None, SOM)
SOM.__add__ = new_instancemethod(_decomp.SOM___add__, None, SOM)
SOM.__sub__ = new_instancemethod(_decomp.SOM___sub__, None, SOM)
SOM.dCdt = new_instancemethod(_decomp.SOM_dCdt, None, SOM)
SOM.integrate = new_instancemethod(_decomp.SOM_integrate, None, SOM)
SOM.to_string = new_instancemethod(_decomp.SOM_to_string, None, SOM)
SOM.__getitem__ = new_instancemethod(_decomp.SOM___getitem__, None, SOM)
SOM.__setitem__ = new_instancemethod(_decomp.SOM___setitem__, None, SOM)
SOM.__rmul__ = new_instancemethod(_decomp.SOM___rmul__, None, SOM)
SOM.__repr__ = new_instancemethod(_decomp.SOM___repr__, None, SOM)
SOM_swigregister = _decomp.SOM_swigregister
SOM_swigregister(SOM)

def SOM_get_pool_types(*args):
    """SOM_get_pool_types() -> component_set"""
    return _decomp.SOM_get_pool_types(*args)






def wood_litter(*args):
    """wood_litter() -> SOM"""
    return _decomp.wood_litter(*args)

def leave_litter(*args):
    """leave_litter() -> SOM"""
    return _decomp.leave_litter(*args)

def root_litter(*args):
    """root_litter() -> SOM"""
    return _decomp.root_litter(*args)

def pure_DOC(*args):
    """pure_DOC() -> SOM"""
    return _decomp.pure_DOC(*args)

EDC, CELL, LIGN, RC, DOC, CO2 = SOM.get_pool_types()



